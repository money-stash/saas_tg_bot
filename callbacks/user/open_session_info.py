import json

from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext

from database.db import db
from states.user import Login
from api.user_api import get_users, get_session_info
from keyboards.inline.user import get_back_to_main_kb

router = Router()


async def build_privacy_keyboard(privacy_data: dict, session_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text="üåå –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                callback_data=f"change_image:{session_id}",
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"change_name:{session_id}"
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é", callback_data=f"change_surname:{session_id}"
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å username",
                callback_data=f"change_username:{session_id}",
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å bio",
                callback_data=f"change_bio:{session_id}",
            ),
        ],
    ]

    label_map = {
        "phone_number": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "last_seen": "–í—Ä–µ–º—è –∑–∞—Ö–æ–¥–∞",
        "profile_photo": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è",
        "message_forwards": "–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
        "calls": "–ó–≤–æ–Ω–∫–∏",
        "voice_messages": "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "messages": "–°–æ–æ–±—â–µ–Ω–∏—è",
        "chat_invites": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
    }

    for key, value in privacy_data.items():
        if key not in label_map:
            continue
        action = "–°–∫—Ä—ã—Ç—å" if value else "–û—Ç–∫—Ä—ã—Ç—å"
        text = f"{action} {label_map[key]}"

        callback_dataa = ""
        if action == "–°–∫—Ä—ã—Ç—å":
            callback_dataa = f"hide:{key}:{session_id}"
        else:
            callback_dataa = f"show:{key}:{session_id}"

        buttons.append([
            InlineKeyboardButton(
                text=text,
                callback_data=callback_dataa
            )
        ])

    buttons.append([
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"delete_session:{session_id}"
            ),
        ])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="sessions_menu")],)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data.startswith("session_info:"))
async def get_session_info_hndlr(call: CallbackQuery, bot: Bot, state: FSMContext):
    await state.clear()
    user_id = call.from_user.id

    all_users = await get_users()

    if db.user_exists(all_users, user_id):
        session_id = call.data.split(":")[1]
        session_data = await get_session_info(session_id)
        session_info = json.loads(session_data)["session"]
        print(session_info)

        if session_info == "error":
            await call.message.edit_text(
                "–°–µ—Å—Å–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞.",
                reply_markup=await get_back_to_main_kb(),
            )
            return

        msg_text = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏\n\n"
        msg_text += f"üÜî –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏: {session_info['account_id']}\n"
        msg_text += (
            f"üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è: {session_info['first_name']} {session_info['last_name']}\n"
        )
        if session_info["username"]:
            msg_text += f"ü´Ü –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{session_info['username']}\n"
        else:
            msg_text += "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"

        if session_info["is_valid"]:
            msg_text += "‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞\n"
        else:
            msg_text += "‚ùå –°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞\n"

        msg_text += f"üë§ BIO: {session_info['bio']}\n"

        msg_text += "\n\nüîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å(True - –≤–∏–¥—è—Ç –≤—Å–µ, False - –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã)\n"
        msg_text += f"–ò–Ω–≤–∞–π—Ç—ã –≤ —á–∞—Ç—ã: {session_info['chat_invites']}\n"
        msg_text += f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {session_info['message_forwards']}\n"
        # msg_text += f"–ü–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {session_info['messages']}\n"
        msg_text += f"–ó–≤–æ–Ω–∫–∏: {session_info['calls']}\n"
        msg_text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {session_info['phone_number']}\n"
        msg_text += f"–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {session_info['profile_photo']}\n"
        msg_text += f"–í—Ä–µ–º—è –∑–∞—Ö–æ–¥–∞: {session_info['last_seen']}\n"

        keyboard = await build_privacy_keyboard(session_info, session_id=int(session_id))

        if session_info:
            await call.message.edit_text(
                text=msg_text,
                reply_markup=keyboard
            )
        else:
            await call.message.edit_text(
                text=f"–°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=await get_back_to_main_kb(),
            )
    else:
        await call.message.edit_text(
            text="‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        )
        await state.set_state(Login.login_key)
